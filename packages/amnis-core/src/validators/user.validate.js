"use strict";module.exports = validate32;module.exports.default = validate32;const schema71 = {"$id":"core-user","$schema":"http://json-schema.org/draft-07/schema#","$ref":"#/definitions/User","definitions":{"User":{"type":"object","properties":{"$id":{"$ref":"#/definitions/Reference","description":"Identifier for this entity.","default":""},"created":{"$ref":"#/definitions/DateJSON","description":"Creation date string.","default":""},"updated":{"$ref":"#/definitions/DateJSON","description":"Updated date string.","default":""},"committed":{"type":"boolean","description":"Flag to determine if the entity has been committed to storage.","default":false},"delete":{"type":"boolean","description":"If this entity is marked to be deleted.","default":false},"$owner":{"$ref":"#/definitions/Reference","description":"Entity that owns this data."},"$creator":{"$ref":"#/definitions/Reference","description":"Possible user id creator of the entity."},"$updaters":{"type":"array","items":{"$ref":"#/definitions/Reference"},"description":"Entities that have updated this."},"name":{"type":"string","description":"Name for the user.","maxLength":64},"email":{"type":"string","description":"Email address","pattern":"^[\\w.-]+@([\\w-]+\\.)+[\\w-]{2,4}$","maxLength":64},"emailVerified":{"type":"boolean","description":"If the user email is verified."},"phone":{"type":"string","description":"Phone number","maxLength":24},"phoneVerified":{"type":"boolean","description":"If the user phone number is verified."},"password":{"type":["string","null"],"description":"User password. A null password means another form of auth must be used.","minLength":6,"maxLength":64,"default":"null"},"domain":{"type":"string","description":"The domain this user belongs to."},"admin":{"type":"boolean","description":"If this is an administrative account."},"devices":{"type":"array","items":{"$ref":"#/definitions/DeviceString"},"description":"Devices this user signs in with."},"$roles":{"type":"array","items":{"$ref":"#/definitions/Reference%3CRole%3E"},"description":"Roles this user has been given."},"$permits":{"type":"array","items":{"$ref":"#/definitions/Reference%3CPermit%3E"},"description":"Special-case permits this user has been bestowed."}},"required":["$creator","$id","$owner","$permits","$roles","$updaters","committed","created","delete","devices","name","password","updated"],"additionalProperties":false,"description":"Data associated to a User."},"Reference":{"type":"string","description":"A id reference to another document."},"DateJSON":{"type":"string","description":"A string that represents a JSON Date."},"DeviceString":{"type":"string","description":"A string that represents a device."},"Reference<Role>":{"type":"string","description":"A id reference to another document."},"Reference<Permit>":{"type":"string","description":"A id reference to another document."}}};const schema72 = {"type":"object","properties":{"$id":{"$ref":"#/definitions/Reference","description":"Identifier for this entity.","default":""},"created":{"$ref":"#/definitions/DateJSON","description":"Creation date string.","default":""},"updated":{"$ref":"#/definitions/DateJSON","description":"Updated date string.","default":""},"committed":{"type":"boolean","description":"Flag to determine if the entity has been committed to storage.","default":false},"delete":{"type":"boolean","description":"If this entity is marked to be deleted.","default":false},"$owner":{"$ref":"#/definitions/Reference","description":"Entity that owns this data."},"$creator":{"$ref":"#/definitions/Reference","description":"Possible user id creator of the entity."},"$updaters":{"type":"array","items":{"$ref":"#/definitions/Reference"},"description":"Entities that have updated this."},"name":{"type":"string","description":"Name for the user.","maxLength":64},"email":{"type":"string","description":"Email address","pattern":"^[\\w.-]+@([\\w-]+\\.)+[\\w-]{2,4}$","maxLength":64},"emailVerified":{"type":"boolean","description":"If the user email is verified."},"phone":{"type":"string","description":"Phone number","maxLength":24},"phoneVerified":{"type":"boolean","description":"If the user phone number is verified."},"password":{"type":["string","null"],"description":"User password. A null password means another form of auth must be used.","minLength":6,"maxLength":64,"default":"null"},"domain":{"type":"string","description":"The domain this user belongs to."},"admin":{"type":"boolean","description":"If this is an administrative account."},"devices":{"type":"array","items":{"$ref":"#/definitions/DeviceString"},"description":"Devices this user signs in with."},"$roles":{"type":"array","items":{"$ref":"#/definitions/Reference%3CRole%3E"},"description":"Roles this user has been given."},"$permits":{"type":"array","items":{"$ref":"#/definitions/Reference%3CPermit%3E"},"description":"Special-case permits this user has been bestowed."}},"required":["$creator","$id","$owner","$permits","$roles","$updaters","committed","created","delete","devices","name","password","updated"],"additionalProperties":false,"description":"Data associated to a User."};const schema73 = {"type":"string","description":"A id reference to another document."};const schema74 = {"type":"string","description":"A string that represents a JSON Date."};const schema79 = {"type":"string","description":"A string that represents a device."};const schema80 = {"type":"string","description":"A id reference to another document."};const schema81 = {"type":"string","description":"A id reference to another document."};const func2 = Object.prototype.hasOwnProperty;const func8 = require("ajv/dist/runtime/ucs2length").default;const pattern0 = new RegExp("^[\\w.-]+@([\\w-]+\\.)+[\\w-]{2,4}$", "u");function validate33(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((((((((((((((data.$creator === undefined) && (missing0 = "$creator")) || ((data.$id === undefined) && (missing0 = "$id"))) || ((data.$owner === undefined) && (missing0 = "$owner"))) || ((data.$permits === undefined) && (missing0 = "$permits"))) || ((data.$roles === undefined) && (missing0 = "$roles"))) || ((data.$updaters === undefined) && (missing0 = "$updaters"))) || ((data.committed === undefined) && (missing0 = "committed"))) || ((data.created === undefined) && (missing0 = "created"))) || ((data.delete === undefined) && (missing0 = "delete"))) || ((data.devices === undefined) && (missing0 = "devices"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.password === undefined) && (missing0 = "password"))) || ((data.updated === undefined) && (missing0 = "updated"))){validate33.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(func2.call(schema72.properties, key0))){validate33.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.$id !== undefined){const _errs2 = errors;if(typeof data.$id !== "string"){validate33.errors = [{instancePath:instancePath+"/$id",schemaPath:"#/definitions/Reference/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.created !== undefined){const _errs5 = errors;if(typeof data.created !== "string"){validate33.errors = [{instancePath:instancePath+"/created",schemaPath:"#/definitions/DateJSON/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.updated !== undefined){const _errs8 = errors;if(typeof data.updated !== "string"){validate33.errors = [{instancePath:instancePath+"/updated",schemaPath:"#/definitions/DateJSON/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.committed !== undefined){const _errs11 = errors;if(typeof data.committed !== "boolean"){validate33.errors = [{instancePath:instancePath+"/committed",schemaPath:"#/properties/committed/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs11 === errors;}else {var valid0 = true;}if(valid0){if(data.delete !== undefined){const _errs13 = errors;if(typeof data.delete !== "boolean"){validate33.errors = [{instancePath:instancePath+"/delete",schemaPath:"#/properties/delete/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs13 === errors;}else {var valid0 = true;}if(valid0){if(data.$owner !== undefined){const _errs15 = errors;if(typeof data.$owner !== "string"){validate33.errors = [{instancePath:instancePath+"/$owner",schemaPath:"#/definitions/Reference/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs15 === errors;}else {var valid0 = true;}if(valid0){if(data.$creator !== undefined){const _errs18 = errors;if(typeof data.$creator !== "string"){validate33.errors = [{instancePath:instancePath+"/$creator",schemaPath:"#/definitions/Reference/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs18 === errors;}else {var valid0 = true;}if(valid0){if(data.$updaters !== undefined){let data7 = data.$updaters;const _errs21 = errors;if(errors === _errs21){if(Array.isArray(data7)){var valid6 = true;const len0 = data7.length;for(let i0=0; i0<len0; i0++){const _errs23 = errors;if(typeof data7[i0] !== "string"){validate33.errors = [{instancePath:instancePath+"/$updaters/" + i0,schemaPath:"#/definitions/Reference/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid6 = _errs23 === errors;if(!valid6){break;}}}else {validate33.errors = [{instancePath:instancePath+"/$updaters",schemaPath:"#/properties/%24updaters/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs21 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){let data9 = data.name;const _errs26 = errors;if(errors === _errs26){if(typeof data9 === "string"){if(func8(data9) > 64){validate33.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/maxLength",keyword:"maxLength",params:{limit: 64},message:"must NOT have more than 64 characters"}];return false;}}else {validate33.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs26 === errors;}else {var valid0 = true;}if(valid0){if(data.email !== undefined){let data10 = data.email;const _errs28 = errors;if(errors === _errs28){if(typeof data10 === "string"){if(func8(data10) > 64){validate33.errors = [{instancePath:instancePath+"/email",schemaPath:"#/properties/email/maxLength",keyword:"maxLength",params:{limit: 64},message:"must NOT have more than 64 characters"}];return false;}else {if(!pattern0.test(data10)){validate33.errors = [{instancePath:instancePath+"/email",schemaPath:"#/properties/email/pattern",keyword:"pattern",params:{pattern: "^[\\w.-]+@([\\w-]+\\.)+[\\w-]{2,4}$"},message:"must match pattern \""+"^[\\w.-]+@([\\w-]+\\.)+[\\w-]{2,4}$"+"\""}];return false;}}}else {validate33.errors = [{instancePath:instancePath+"/email",schemaPath:"#/properties/email/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs28 === errors;}else {var valid0 = true;}if(valid0){if(data.emailVerified !== undefined){const _errs30 = errors;if(typeof data.emailVerified !== "boolean"){validate33.errors = [{instancePath:instancePath+"/emailVerified",schemaPath:"#/properties/emailVerified/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs30 === errors;}else {var valid0 = true;}if(valid0){if(data.phone !== undefined){let data12 = data.phone;const _errs32 = errors;if(errors === _errs32){if(typeof data12 === "string"){if(func8(data12) > 24){validate33.errors = [{instancePath:instancePath+"/phone",schemaPath:"#/properties/phone/maxLength",keyword:"maxLength",params:{limit: 24},message:"must NOT have more than 24 characters"}];return false;}}else {validate33.errors = [{instancePath:instancePath+"/phone",schemaPath:"#/properties/phone/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs32 === errors;}else {var valid0 = true;}if(valid0){if(data.phoneVerified !== undefined){const _errs34 = errors;if(typeof data.phoneVerified !== "boolean"){validate33.errors = [{instancePath:instancePath+"/phoneVerified",schemaPath:"#/properties/phoneVerified/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs34 === errors;}else {var valid0 = true;}if(valid0){if(data.password !== undefined){let data14 = data.password;const _errs36 = errors;if((typeof data14 !== "string") && (data14 !== null)){validate33.errors = [{instancePath:instancePath+"/password",schemaPath:"#/properties/password/type",keyword:"type",params:{type: schema72.properties.password.type},message:"must be string,null"}];return false;}if(errors === _errs36){if(typeof data14 === "string"){if(func8(data14) > 64){validate33.errors = [{instancePath:instancePath+"/password",schemaPath:"#/properties/password/maxLength",keyword:"maxLength",params:{limit: 64},message:"must NOT have more than 64 characters"}];return false;}else {if(func8(data14) < 6){validate33.errors = [{instancePath:instancePath+"/password",schemaPath:"#/properties/password/minLength",keyword:"minLength",params:{limit: 6},message:"must NOT have fewer than 6 characters"}];return false;}}}}var valid0 = _errs36 === errors;}else {var valid0 = true;}if(valid0){if(data.domain !== undefined){const _errs38 = errors;if(typeof data.domain !== "string"){validate33.errors = [{instancePath:instancePath+"/domain",schemaPath:"#/properties/domain/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs38 === errors;}else {var valid0 = true;}if(valid0){if(data.admin !== undefined){const _errs40 = errors;if(typeof data.admin !== "boolean"){validate33.errors = [{instancePath:instancePath+"/admin",schemaPath:"#/properties/admin/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs40 === errors;}else {var valid0 = true;}if(valid0){if(data.devices !== undefined){let data17 = data.devices;const _errs42 = errors;if(errors === _errs42){if(Array.isArray(data17)){var valid8 = true;const len1 = data17.length;for(let i1=0; i1<len1; i1++){const _errs44 = errors;if(typeof data17[i1] !== "string"){validate33.errors = [{instancePath:instancePath+"/devices/" + i1,schemaPath:"#/definitions/DeviceString/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid8 = _errs44 === errors;if(!valid8){break;}}}else {validate33.errors = [{instancePath:instancePath+"/devices",schemaPath:"#/properties/devices/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs42 === errors;}else {var valid0 = true;}if(valid0){if(data.$roles !== undefined){let data19 = data.$roles;const _errs47 = errors;if(errors === _errs47){if(Array.isArray(data19)){var valid10 = true;const len2 = data19.length;for(let i2=0; i2<len2; i2++){const _errs49 = errors;if(typeof data19[i2] !== "string"){validate33.errors = [{instancePath:instancePath+"/$roles/" + i2,schemaPath:"#/definitions/Reference%3CRole%3E/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid10 = _errs49 === errors;if(!valid10){break;}}}else {validate33.errors = [{instancePath:instancePath+"/$roles",schemaPath:"#/properties/%24roles/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs47 === errors;}else {var valid0 = true;}if(valid0){if(data.$permits !== undefined){let data21 = data.$permits;const _errs52 = errors;if(errors === _errs52){if(Array.isArray(data21)){var valid12 = true;const len3 = data21.length;for(let i3=0; i3<len3; i3++){const _errs54 = errors;if(typeof data21[i3] !== "string"){validate33.errors = [{instancePath:instancePath+"/$permits/" + i3,schemaPath:"#/definitions/Reference%3CPermit%3E/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid12 = _errs54 === errors;if(!valid12){break;}}}else {validate33.errors = [{instancePath:instancePath+"/$permits",schemaPath:"#/properties/%24permits/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs52 === errors;}else {var valid0 = true;}}}}}}}}}}}}}}}}}}}}}}else {validate33.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate33.errors = vErrors;return errors === 0;}function validate32(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="core-user" */;let vErrors = null;let errors = 0;if(!(validate33(data, {instancePath,parentData,parentDataProperty,rootData}))){vErrors = vErrors === null ? validate33.errors : vErrors.concat(validate33.errors);errors = vErrors.length;}validate32.errors = vErrors;return errors === 0;}