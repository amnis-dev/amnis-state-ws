"use strict";module.exports = validate24;module.exports.default = validate24;const schema46 = {"$id":"core-session","$schema":"http://json-schema.org/draft-07/schema#","$ref":"#/definitions/Session","definitions":{"Session":{"type":"object","properties":{"$id":{"$ref":"#/definitions/Reference","description":"Identifier for this entity.","default":""},"created":{"$ref":"#/definitions/DateJSON","description":"Creation date string.","default":""},"updated":{"$ref":"#/definitions/DateJSON","description":"Updated date string.","default":""},"committed":{"type":"boolean","description":"Flag to determine if the entity has been committed to storage.","default":false},"delete":{"type":"boolean","description":"If this entity is marked to be deleted.","default":false},"$owner":{"$ref":"#/definitions/Reference","description":"Entity that owns this data."},"$creator":{"$ref":"#/definitions/Reference","description":"Possible user id creator of the entity."},"$updaters":{"type":"array","items":{"$ref":"#/definitions/Reference"},"description":"Entities that have updated this."},"$subject":{"$ref":"#/definitions/Reference","description":"Subject of the session. Typically a user id."},"iat":{"$ref":"#/definitions/DateNumeric","description":"Possible \"Issued At\" property when decoding."},"exp":{"$ref":"#/definitions/DateNumeric","description":"Expiration date (numeric)."},"admin":{"type":"boolean","description":"Flag that determines if this is an administrative session."},"tokens":{"type":"array","items":{"$ref":"#/definitions/TokenString"},"description":"Tokens this session possesses"},"name":{"type":"string","description":"Display name."},"dmn":{"type":"string","description":"Domain."},"avatar":{"anyOf":[{"$ref":"#/definitions/SURL"},{"type":"null"}],"description":"Avatar image url."}},"required":["$creator","$id","$owner","$subject","$updaters","admin","avatar","committed","created","delete","dmn","exp","name","tokens","updated"],"additionalProperties":false,"description":"A session object. For stateless servers, it is recommended to store session data in *SECURE* HTTP cookies only."},"Reference":{"type":"string","description":"A id reference to another document."},"DateJSON":{"type":"string","description":"A string that represents a JSON Date."},"DateNumeric":{"type":"number","description":"A string that represents a JSON Date."},"TokenString":{"type":"string","description":"String representation of a token that contains an encoded jwt."},"SURL":{"type":"string","description":"A string that represents a URL. Named SURL (String URL) so it's not confused with the URL object type."}}};const schema47 = {"type":"object","properties":{"$id":{"$ref":"#/definitions/Reference","description":"Identifier for this entity.","default":""},"created":{"$ref":"#/definitions/DateJSON","description":"Creation date string.","default":""},"updated":{"$ref":"#/definitions/DateJSON","description":"Updated date string.","default":""},"committed":{"type":"boolean","description":"Flag to determine if the entity has been committed to storage.","default":false},"delete":{"type":"boolean","description":"If this entity is marked to be deleted.","default":false},"$owner":{"$ref":"#/definitions/Reference","description":"Entity that owns this data."},"$creator":{"$ref":"#/definitions/Reference","description":"Possible user id creator of the entity."},"$updaters":{"type":"array","items":{"$ref":"#/definitions/Reference"},"description":"Entities that have updated this."},"$subject":{"$ref":"#/definitions/Reference","description":"Subject of the session. Typically a user id."},"iat":{"$ref":"#/definitions/DateNumeric","description":"Possible \"Issued At\" property when decoding."},"exp":{"$ref":"#/definitions/DateNumeric","description":"Expiration date (numeric)."},"admin":{"type":"boolean","description":"Flag that determines if this is an administrative session."},"tokens":{"type":"array","items":{"$ref":"#/definitions/TokenString"},"description":"Tokens this session possesses"},"name":{"type":"string","description":"Display name."},"dmn":{"type":"string","description":"Domain."},"avatar":{"anyOf":[{"$ref":"#/definitions/SURL"},{"type":"null"}],"description":"Avatar image url."}},"required":["$creator","$id","$owner","$subject","$updaters","admin","avatar","committed","created","delete","dmn","exp","name","tokens","updated"],"additionalProperties":false,"description":"A session object. For stateless servers, it is recommended to store session data in *SECURE* HTTP cookies only."};const schema48 = {"type":"string","description":"A id reference to another document."};const schema49 = {"type":"string","description":"A string that represents a JSON Date."};const schema55 = {"type":"number","description":"A string that represents a JSON Date."};const schema57 = {"type":"string","description":"String representation of a token that contains an encoded jwt."};const schema58 = {"type":"string","description":"A string that represents a URL. Named SURL (String URL) so it's not confused with the URL object type."};const func2 = Object.prototype.hasOwnProperty;function validate25(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((((((((((((((((data.$creator === undefined) && (missing0 = "$creator")) || ((data.$id === undefined) && (missing0 = "$id"))) || ((data.$owner === undefined) && (missing0 = "$owner"))) || ((data.$subject === undefined) && (missing0 = "$subject"))) || ((data.$updaters === undefined) && (missing0 = "$updaters"))) || ((data.admin === undefined) && (missing0 = "admin"))) || ((data.avatar === undefined) && (missing0 = "avatar"))) || ((data.committed === undefined) && (missing0 = "committed"))) || ((data.created === undefined) && (missing0 = "created"))) || ((data.delete === undefined) && (missing0 = "delete"))) || ((data.dmn === undefined) && (missing0 = "dmn"))) || ((data.exp === undefined) && (missing0 = "exp"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.tokens === undefined) && (missing0 = "tokens"))) || ((data.updated === undefined) && (missing0 = "updated"))){validate25.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(func2.call(schema47.properties, key0))){validate25.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.$id !== undefined){const _errs2 = errors;if(typeof data.$id !== "string"){validate25.errors = [{instancePath:instancePath+"/$id",schemaPath:"#/definitions/Reference/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.created !== undefined){const _errs5 = errors;if(typeof data.created !== "string"){validate25.errors = [{instancePath:instancePath+"/created",schemaPath:"#/definitions/DateJSON/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.updated !== undefined){const _errs8 = errors;if(typeof data.updated !== "string"){validate25.errors = [{instancePath:instancePath+"/updated",schemaPath:"#/definitions/DateJSON/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.committed !== undefined){const _errs11 = errors;if(typeof data.committed !== "boolean"){validate25.errors = [{instancePath:instancePath+"/committed",schemaPath:"#/properties/committed/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs11 === errors;}else {var valid0 = true;}if(valid0){if(data.delete !== undefined){const _errs13 = errors;if(typeof data.delete !== "boolean"){validate25.errors = [{instancePath:instancePath+"/delete",schemaPath:"#/properties/delete/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs13 === errors;}else {var valid0 = true;}if(valid0){if(data.$owner !== undefined){const _errs15 = errors;if(typeof data.$owner !== "string"){validate25.errors = [{instancePath:instancePath+"/$owner",schemaPath:"#/definitions/Reference/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs15 === errors;}else {var valid0 = true;}if(valid0){if(data.$creator !== undefined){const _errs18 = errors;if(typeof data.$creator !== "string"){validate25.errors = [{instancePath:instancePath+"/$creator",schemaPath:"#/definitions/Reference/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs18 === errors;}else {var valid0 = true;}if(valid0){if(data.$updaters !== undefined){let data7 = data.$updaters;const _errs21 = errors;if(errors === _errs21){if(Array.isArray(data7)){var valid6 = true;const len0 = data7.length;for(let i0=0; i0<len0; i0++){const _errs23 = errors;if(typeof data7[i0] !== "string"){validate25.errors = [{instancePath:instancePath+"/$updaters/" + i0,schemaPath:"#/definitions/Reference/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid6 = _errs23 === errors;if(!valid6){break;}}}else {validate25.errors = [{instancePath:instancePath+"/$updaters",schemaPath:"#/properties/%24updaters/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs21 === errors;}else {var valid0 = true;}if(valid0){if(data.$subject !== undefined){const _errs26 = errors;if(typeof data.$subject !== "string"){validate25.errors = [{instancePath:instancePath+"/$subject",schemaPath:"#/definitions/Reference/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs26 === errors;}else {var valid0 = true;}if(valid0){if(data.iat !== undefined){let data10 = data.iat;const _errs29 = errors;if(!((typeof data10 == "number") && (isFinite(data10)))){validate25.errors = [{instancePath:instancePath+"/iat",schemaPath:"#/definitions/DateNumeric/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs29 === errors;}else {var valid0 = true;}if(valid0){if(data.exp !== undefined){let data11 = data.exp;const _errs32 = errors;if(!((typeof data11 == "number") && (isFinite(data11)))){validate25.errors = [{instancePath:instancePath+"/exp",schemaPath:"#/definitions/DateNumeric/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs32 === errors;}else {var valid0 = true;}if(valid0){if(data.admin !== undefined){const _errs35 = errors;if(typeof data.admin !== "boolean"){validate25.errors = [{instancePath:instancePath+"/admin",schemaPath:"#/properties/admin/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs35 === errors;}else {var valid0 = true;}if(valid0){if(data.tokens !== undefined){let data13 = data.tokens;const _errs37 = errors;if(errors === _errs37){if(Array.isArray(data13)){var valid11 = true;const len1 = data13.length;for(let i1=0; i1<len1; i1++){const _errs39 = errors;if(typeof data13[i1] !== "string"){validate25.errors = [{instancePath:instancePath+"/tokens/" + i1,schemaPath:"#/definitions/TokenString/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid11 = _errs39 === errors;if(!valid11){break;}}}else {validate25.errors = [{instancePath:instancePath+"/tokens",schemaPath:"#/properties/tokens/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs37 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){const _errs42 = errors;if(typeof data.name !== "string"){validate25.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs42 === errors;}else {var valid0 = true;}if(valid0){if(data.dmn !== undefined){const _errs44 = errors;if(typeof data.dmn !== "string"){validate25.errors = [{instancePath:instancePath+"/dmn",schemaPath:"#/properties/dmn/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs44 === errors;}else {var valid0 = true;}if(valid0){if(data.avatar !== undefined){let data17 = data.avatar;const _errs46 = errors;const _errs47 = errors;let valid13 = false;const _errs48 = errors;if(typeof data17 !== "string"){const err0 = {instancePath:instancePath+"/avatar",schemaPath:"#/definitions/SURL/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}var _valid0 = _errs48 === errors;valid13 = valid13 || _valid0;if(!valid13){const _errs51 = errors;if(data17 !== null){const err1 = {instancePath:instancePath+"/avatar",schemaPath:"#/properties/avatar/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}var _valid0 = _errs51 === errors;valid13 = valid13 || _valid0;}if(!valid13){const err2 = {instancePath:instancePath+"/avatar",schemaPath:"#/properties/avatar/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;validate25.errors = vErrors;return false;}else {errors = _errs47;if(vErrors !== null){if(_errs47){vErrors.length = _errs47;}else {vErrors = null;}}}var valid0 = _errs46 === errors;}else {var valid0 = true;}}}}}}}}}}}}}}}}}}}else {validate25.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate25.errors = vErrors;return errors === 0;}function validate24(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="core-session" */;let vErrors = null;let errors = 0;if(!(validate25(data, {instancePath,parentData,parentDataProperty,rootData}))){vErrors = vErrors === null ? validate25.errors : vErrors.concat(validate25.errors);errors = vErrors.length;}validate24.errors = vErrors;return errors === 0;}